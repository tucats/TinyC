

1.  [DONE] Add ability to have errors as a discrete object.  The error can
    take a code as a value, and an optional argument.  The code is formatted
    as a string internally for localization purposes, though this is not yet
    done. The description method formats the error for printing.

2.  [DONE] Each major class must include the ability to have an error object
    associated with it.  For example the parser can get an error, but so can
    the ExpressionParser, DeclarationParser, etc.

3.  [DONE] have the error formatter handle multi-line buffers gracefully by
    only showing the individual line with the error on it.
    

4.  [DONE] Update the expression parser to use the new error object instead of
    brute-force logging.
    

5.  [DONE] Update the expression intepreter to use the new error object instead of
    brute-force logging.

6.  [DONE] Create a Statement class that has the ability to use the parser to handle
    parsing any known statement.  It should try to parse the next available
    statement type.

7.  [DONE] Add IF statement parser that knows how to process one or two (else-clause)
    statements, which can include the BLOCK type. NOTE: this required considerable
    adjustment to the relationship between blocks and statements and when a trailing
    ";" is required, particularly for if statements with blocks.
    
8.  [DONE] Add function entry point definition.  This may involve changing how
    declarations are parsed, since a function can become a kind of declaration
    now. 

9.  [DONE] Create statement interpreter that traverses tree.  For BLOCK it creates
    a new symbol table scope for declarations.  DECLARE adds to the symbol
    table.  Assignment and IF statements execute normally.
    
10. [DONE] Implement RETURN statement thet returns a value from a block.

11. [DONE] Change invocation to search for a function called "main" and execute that.

12. [DONE] Function arguments must generate DECLARE objects in local block graph, with
    specialized assignment operators that fetch argument list items.

13. [DONE] You can execute a MODULE tree with an entry point name and it is searched
    for an run.  Or you can start with a tree that is an ENTRYPOINT and it just
    runs that tree.

14. [DONE] A new call to a routine must parse an argument list and create an argument
    array, then call a new invocation of TCContext to run it, creating a new
    scope and storage area.
    
15. [DONE] Rather than storing the value in the symbol table, we must have a storage area
    of real memory that variables are allocated from.  This will be required before
    pointers can work.  The DECLARE module will need to allocate storage and
    save those allocated values in the table, which will be offsets into the storage
    domain.  Need a separate class that is storage management.
    
16. [DONE] Need to note that an assignment is really a part of the expression processor, and
    is an operator that means store lvalue in rvalue.  This will be easier to support
    when references in an expression uniformly generate an address followed by a fetch
    or store as needed.
    
    This also supports function invocations with no return code (expression whose value
    is discarded) and assignments within if statement condition expressions.

17. [DONE] "int" and "long" are comingled as data types incorrectly in both TCValue and the
    expression interpreter -- need to clean that up.

18. [DONE] Need to scan a module on startup to find all the C string constants and move them
    to the Storage-managed global storage area, and replace references with references
    to char* items.  This assumes char* is working.

19. [DONE] Need to refactor out the parsing of type information from the Declaration parser so
    types used for entry points, casting, etc. are independantly parsed from storage
    declarations.  Change module parsing to expect a type prefix for the entry point, not
    a special version of declaration as it is now.

20. [DONE] When calling a function, the arguments must be cast to the types of the
    reciving arguments.

21. [DONE] String allocator now keeps a dictionary of all the strings it has allocated so
    it just re-uses the storage.  This is all assumed to be constant storage so multiple
    pointers to the same string are allowed.

22. [DONE] Declaration of pointer types is not working yet; the DECLARE node has an ADDRESS and
    a NAME subnode and the declaration processor does not handle it correctly.

23. [DONE] Implement write through address in ASSIGNMENT operation, so *b=0 works.

24. [DONE] Implement dynamic non-automatic storage in Storage class to support malloc, free, and
    anything built on them.

25. [DONE] Implement builtins for malloc() and free().

26. [DONE] Prequalify the tree before execution by checking for errors.  Initially this
    means just checking for CALL nodes that cannot be resolved to a user-provided function
    or a known built-in.

27. [DONE] Allow array declarations; i.e. int foo[10].  This generates a call to _array() at
    runtime to allocate storage during the DECLARE phase, after which foo is a pointer to
    the storage, and sized by the base type.  The array storage is aligned by the base type.

28. [DONE]Support array references; i.e. x = foo[i] or foo[j] = 3.  These will require multiplying
    the index by the stride and adding to the base pointer value.  LValue and RValue will be
    handled the same if possible; i.e. result in an ADDRESS calculation. However, the RValue has
    an additional DEREFERENCE added to it.
    
29. Use the variable name stored in DEREFERENCE node to determine the base size of the array
    type.
    
30. Use the REFERENCE operator to just load a pointer to a type on the value, and then add a
    DEREFERENCE to it so that the way we locate scalar and array addresses is the same.
    
31. [DONE] Implement basic FOR loop processing.  Each clause (init, term, increment) and a
    statement or block is added for a FOR node.  The loop execution interprets the block and
    increment until the term is satisfied.

32. [DONE] Implement BREAK and CONTINUE to affect for() and while() loop execution, using
    non-error signals to unwind nested blocks, etc.

33. [DONE] Support increment and decrement pre- and post-evaluation operators (++, --)

34. [DONE] Support character constants like 'a' or '\n' which are converted to SCALAR ints

35. [DONE] Clean up functional naming in the TinyC processor.  For example, the compileFile and
    compileString do not actually compile; they only read the value and tokenize it.  The
    execute function similarly does the "compilation" by forming the abstract syntax tree
    and allocating storage before executing.  These should be more clearly identified as
    phases that can be done by the caller, with helper functions like runFile and runString.

36. [DONE] LValue parsing in the TCAssignmentParser does not handle address references correctly; 
    i.e. *foo = 55 and similar cases.  Need to modify it to handle dereference prefix.

37. [DONE] Add modulo ("%") operator for integer and floating types.

38. [DONE] When reading source lines, construct a line map... array of pointer/length (NSRange?) for
    each line in the input buffer.  This can be used later to convert position info from each
    token into the matching source line. This is held in the parser, so anyone wanting to map back
    to original source needs to reference the parser.

39. [DONE] Change error handling to include position info, that can be used to report both compile
    and runtime problems. This can be done by using the current active parser at compile time, or
    the current AST node at runtime.  Each AST node points to the parent parser which holds the
    source and line number data.

40. Pointers and arrays don't quite work interchangably as they should.  The symbol table needs
    to diffferentiate between address-of-value and pointer-to-value with a new attribute.
    
41. Symbols need major improvements to be able to handle structures and frame-relative storage.

42. Once symbols are upgraded, need a new scanning phase that allocates storage within each
    frame, and calculates frame sizes to put at start of each block.
    
43. Once we have a proper symbol table we can detect missing symbols right away during compile
    phase without having runtime allocations.

44. [DONE] Need to modify runtime handling of math in TCValue so that it can process integer math on
    pointer data types without panic about unsupported data types.

45. [DONE] If there is no program file, just assume stdin. Modify XCode project to pass parameters
    for default test case execution.
    
    